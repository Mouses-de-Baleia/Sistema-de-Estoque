from datetime import datetime
import json

# Estrutura de Produto
class Produto:
    def __init__(self, id_produto, nome, categoria, quantidade, preco, localizacao):
        self.id_produto = id_produto
        self.nome = nome
        self.categoria = categoria
        self.quantidade = quantidade
        self.preco = preco
        self.localizacao = localizacao

# Estrutura de Categoria
class Categoria:
    def __init__(self, nome):
        self.nome = nome

# Estrutura de Movimentação
class Movimentacao:
    def __init__(self, id_mov, id_produto, tipo, quantidade, data=None):
        self.id_mov = id_mov
        self.id_produto = id_produto
        self.tipo = tipo  # 'entrada' ou 'saida'
        self.quantidade = quantidade
        self.data = data or datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Base de Dados
produtos = {}
categorias = {}
movimentacoes = []


# Função para salvar dados em JSON
def salvar_dados_json():
    with open("estoque_data.json", "w") as f:
        # Converte os objetos para dicionários
        data = {
            "produtos": {id_: produto.__dict__ for id_, produto in produtos.items()},
            "categorias": {nome: categoria.__dict__ for nome, categoria in categorias.items()},
            "movimentacoes": [mov.__dict__ for mov in movimentacoes]
        }
        json.dump(data, f, indent=4)
    print("Dados salvos com sucesso em JSON.")

# Função para carregar dados de JSON
def carregar_dados_json():
    global produtos, categorias, movimentacoes
    try:
        with open("estoque_data.json", "r") as f:
            data = json.load(f)
            produtos.update({id_: Produto(**prod) for id_, prod in data["produtos"].items()})
            categorias.update({nome: Categoria(**cat) for nome, cat in data["categorias"].items()})
            movimentacoes.extend([Movimentacao(**mov) for mov in data["movimentacoes"]])
        print("Dados carregados com sucesso do JSON.")
        for produto in produtos.values():
            produto.id_produto = int(produto.id_produto)
            produto.quantidade = int(produto.quantidade)
            produto.preco = float(produto.preco)
    except FileNotFoundError:
        print("Nenhum dado encontrado, iniciando novo arquivo.")

# Carrega os dados ao iniciar o programa
carregar_dados_json()

# Função para cadastrar uma nova categoria
def cadastrar_categoria(nome):
    if nome not in categorias:
        categorias[nome] = Categoria(nome)
        print(f"Categoria '{nome}' cadastrada.")
    else:
        print(f"Categoria '{nome}' já existe.")
    salvar_dados_json()

# Função para cadastrar um novo produto
def cadastrar_produto(id_produto, nome, categoria, quantidade, preco, localizacao):
    if id_produto in produtos:
        print("Produto já cadastrado.")
        return
    if categoria not in categorias:
        print("Categoria não existe. Cadastre a categoria primeiro.")
        return

    produtos[id_produto] = Produto(id_produto, nome, categoria, quantidade, preco, localizacao)
    print(f"Produto '{nome}' cadastrado com sucesso.")
    salvar_dados_json()

# Função para consultar um produto pelo ID
def consultar_produto():
    while True:
        try:
            pesquisa = int(input("1: Pesquisa por Nome. \n2: Pesquisa por ID. \n"))
            if pesquisa > 2 or pesquisa < 1:
                print("Valor inválido.")
            elif pesquisa == 2 :
                id = input('Digite o id do produto que deseja procurar. \n')
                consultar_produto_por_ID(id)
                break
            else:
                nome = input('Digite o nome do produto que deseja procurar. \n')
                consultar_produto_por_nome(nome)
                break
        except:
            print("Valor inválido.")

# Função para consultar um produto pelo ID
def consultar_produto_por_ID(id_produto):
    produto = produtos.get(id_produto)
    if produto:
        print(f"ID: {produto.id_produto}, Nome: {produto.nome}, Categoria: {produto.categoria}, "
              f"Quantidade: {produto.quantidade}, Preço: {produto.preco}, Localização: {produto.localizacao}")
    else:
        print("Produto não encontrado.")
    salvar_dados_json()
    
# Função para consultar um produto pelo nome
def consultar_produto_por_nome(nome_produto):
    print(f"Resultados para '{nome_produto}':")
    encontrados = [produto for produto in produtos.values() if nome_produto.lower() in produto.nome.lower()]
    if encontrados:
        for produto in encontrados:
            print(f"ID: {produto.id_produto}, Nome: {produto.nome}, Categoria: {produto.categoria}, "
                  f"Quantidade: {produto.quantidade}, Preço: {produto.preco}, Localização: {produto.localizacao}")
    else:
        print("Nenhum produto encontrado com esse nome.")

# Função para registrar uma movimentação de entrada
def registrar_entrada(id_produto, quantidade):
    produto = produtos.get(id_produto)
    if produto:
        produto.quantidade += quantidade
        movimentacoes.append(Movimentacao(len(movimentacoes) + 1, id_produto, 'entrada', quantidade))
        print(f"Entrada de {quantidade} unidades para o produto '{produto.nome}' registrada.")
    else:
        print("Produto não encontrado.")
    salvar_dados_json()

# Função para registrar uma movimentação de saída
def registrar_saida(id_produto, quantidade):
    produto = produtos.get(id_produto)
    if produto:
        if produto.quantidade >= quantidade:
            produto.quantidade -= quantidade
            movimentacoes.append(Movimentacao(len(movimentacoes) + 1, id_produto, 'saida', quantidade))
            print(f"Saída de {quantidade} unidades para o produto '{produto.nome}' registrada.")
        else:
            print("Quantidade insuficiente no estoque.")
    else:
        print("Produto não encontrado.")
    salvar_dados_json()

# Relatório de produtos com estoque baixo
def relatorio_estoque_baixo(limite):
    print("Produtos com estoque baixo:")
    for produto in produtos.values():
        if produto.quantidade <= limite:
            print(f"ID: {produto.id_produto}, Nome: {produto.nome}, Quantidade: {produto.quantidade}")
    salvar_dados_json()

# Relatório de produtos com excesso de estoque
def relatorio_excesso_estoque(limite):
    print("Produtos com excesso de estoque:")
    for produto in produtos.values():
        if produto.quantidade >= limite:
            print(f"ID: {produto.id_produto}, Nome: {produto.nome}, Quantidade: {produto.quantidade}")
    salvar_dados_json()

# Consultar histórico de movimentações para um produto específico
def consultar_historico_movimentacoes(id_produto):
    print(f"Movimentações para o produto ID {id_produto}:")
    for mov in movimentacoes:
        if mov.id_produto == id_produto:
            print(f"ID Movimentação: {mov.id_mov}, Tipo: {mov.tipo}, Quantidade: {mov.quantidade}, Data: {mov.data}")
    salvar_dados_json()

def deletar_categoria(nome_categoria):
    # Primeiro, verificamos se a categoria existe
    if nome_categoria in categorias:
        # Armazena os IDs dos produtos que serão removidos
        produtos_removidos = []

        # Percorre uma lista dos IDs dos produtos para evitar problemas de mutação do dicionário durante a iteração
        for id_produto in list(produtos.keys()):
            if produtos[id_produto].categoria == nome_categoria:
                produtos_removidos.append(id_produto)
                del produtos[id_produto]  # Deleta o produto

        # Remove a categoria
        del categorias[nome_categoria]
        
        # Salva as alterações no JSON
        salvar_dados_json()

        print(f"Categoria '{nome_categoria}' e os seguintes produtos foram removidos: {produtos_removidos}")
    else:
        print(f"A categoria '{nome_categoria}' não foi encontrada.")

def deletar_produto(id_produto):
    if id_produto in produtos:
        del produtos[id_produto]
        print(f"Produto {id_produto} deletado com sucesso.")
        salvar_dados_json()
    else:
        print(f"Produto {id_produto} não encontrado.")

